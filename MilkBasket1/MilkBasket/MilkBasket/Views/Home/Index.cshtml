@{
    ViewData["Title"] = "Home Page";
    var table = ViewBag.data as System.Data.DataTable;
    int i = 1;
}


<script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>
<div class="container-fluid" id="bdy">
    <br>
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 id="header" class="m-0 font-weight-bold text-primary">Society List</h6>
        </div>
        <div class="card-body">
            <div class="row">
               <div class="col-2">
                    <button onclick="exportexcel('Society')" class="btn btn-primary mb-2">Export To Excel</button>
                </div>
                <table id="mytable" class="table table-bordered table-hover">
    <thead>
        <tr>
        <th>Sr.No</th>
        <th>Society Code</th>
        <th>Society Name</th>
    <th>Latitude</th>
    <th>Longitude</th>
        </tr>
    </thead>
    <tbody>
        @if (table != null)
        {
            foreach (System.Data.DataRow row in table.Rows){
        <tr>
            <td>@i</td>
            <td>@row["SocietyCode"]</td>
            <td>@row["SocietyName"]</td>
                    <td>@row["Latitude"]</td>
                    <td>@row["Longitude"]</td>
            
        </tr>
            i++;
        }
        }
        
    </tbody>
</table>
</div>
</div>
</div>
<script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>

<script>
        document.getElementById("loaderOverlay").style.display = "none";
    function exportexcel(fileName) {
        const table = document.getElementById("mytable").cloneNode(true);
        const rows = table.querySelectorAll("tr");
        const columnsToRemove = new Set();

        // Identify columns to remove (e.g., starts with Hid_ or Action)
        rows[0].querySelectorAll("th, td").forEach((cell, index) => {
            const text = cell.textContent.trim();
            if (text.startsWith("Hid_") || text.startsWith("Action")) {
                columnsToRemove.add(index);
            }
        });

        // Remove marked columns
        rows.forEach(row => {
            Array.from(row.children).forEach((cell, idx) => {
                if (columnsToRemove.has(idx)) cell.remove();
            });
        });

        // Convert cleaned table to worksheet
        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.table_to_sheet(table);

        // Style the header row (only works with xlsx-style)
        const range = XLSX.utils.decode_range(ws['!ref']);
        for (let C = range.s.c; C <= range.e.c; ++C) {
            const addr = XLSX.utils.encode_cell({ c: C, r: 0 });
            if (ws[addr]) {
                ws[addr].s = {
                    fill: {
                        fgColor: { rgb: "4F81BD" },
                        patternType: "solid"
                    },
                    font: {
                        bold: true,
                        color: { rgb: "FFFFFF" }
                    },
                    alignment: {
                        horizontal: "center"
                    },
                    border: {
                        top: { style: "thin", color: { rgb: "000000" } },
                        bottom: { style: "thin", color: { rgb: "000000" } },
                        left: { style: "thin", color: { rgb: "000000" } },
                        right: { style: "thin", color: { rgb: "000000" } }
                    }
                };
            }
        }

        // Auto column width
        const colWidths = [];
        for (let C = range.s.c; C <= range.e.c; ++C) {
            let maxLen = 10;
            for (let R = range.s.r; R <= range.e.r; ++R) {
                const addr = XLSX.utils.encode_cell({ c: C, r: R });
                const cell = ws[addr];
                if (cell && cell.v) {
                    const len = cell.v.toString().length;
                    if (len > maxLen) maxLen = len;
                }
            }
            colWidths.push({ wch: maxLen + 2 });
        }
        ws['!cols'] = colWidths;

        XLSX.utils.book_append_sheet(wb, ws, "Sheet1");
        XLSX.writeFile(wb, fileName + ".xlsx");
    }
</script>
